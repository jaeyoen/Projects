{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b04c2b3d",
   "metadata": {},
   "source": [
    "# First digits, last digits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f0856f4",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc9ac4cf",
   "metadata": {},
   "source": [
    "In the field of data science or data analyst, you don't always have access to easy-to-interpret data. Sometimes, seemingly unrelated data is also analyzed. In this way, we will try to find patterns by extracting numbers in two ways."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4f16347",
   "metadata": {},
   "source": [
    "In this project, we will be using two method which are extraction of first digits and last digits from CSV file. Also we will be filtering the text file to only find the numbers and apply our method.\n",
    "\n",
    "With extracted first digits and last digits, we will be using visual graph to see the frequency in which digit has been used the most then analyze the reason mostly used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0847dd25",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import string\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52afdb9b",
   "metadata": {},
   "source": [
    "We will be creating a function called `fd(x)` which take the numbers as an input.\n",
    "\n",
    "Using `string.printable` application, we save 1~ 9 as a string.\n",
    "\n",
    "After converting our input numbers into string, we check through each string to see if there are anything that does not match with saved string list(1~9).\n",
    "\n",
    "In this process, we will be ignoring floating point, negative sign and zeros.\n",
    "\n",
    "By checking each string, we return the digit that first match to our saved string list(1~9).\n",
    "If nothing match until the end, we return 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8b8d7a72",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fd(x): #First digit function\n",
    "    one_to_nine = string.printable[1:10] #list of 1~9 digits in string into list \n",
    "    x_str = str(x) # convert input numbers into string\n",
    "    for i in range(len(x_str)): # check through each input string\n",
    "        if x_str[i] in one_to_nine: # if the string contain the digit,\n",
    "            return x_str[i] # return that digit\n",
    "            break # break since we found first digit\n",
    "    else: # if nothing found,\n",
    "        return str(0) # return 0\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2b40abb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fd(123.45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b8c581ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'7'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fd(-75)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "203b6973",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'3'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fd(0.00345)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "007bd452",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fd(0.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca83f4cb",
   "metadata": {},
   "source": [
    "We will be creating a function called `ld(x)` which take the numbers as an input.\n",
    "\n",
    "Using `string.printable` application, we save 1~ 9 as a string.\n",
    "\n",
    "After converting our input numbers into string, we check through each string to see if there are anything that does not match with saved string list(1~9).\n",
    "\n",
    "In this process, we will be ignoring floating point, negative sign and zeros.\n",
    "\n",
    "By checking each string, we return the last digit that first match to our saved string list(1~9).\n",
    "If nothing match until the end, we return 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6fbb936d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ld(x): # Last digit function\n",
    "    one_to_nine = string.printable[1:10] #list of 1~9 digits in string into list \n",
    "    x_str = str(x) # convert input numbers into string\n",
    "    for i in reversed(range(len(x_str))): # check through each input string in reversed order\n",
    "        if x_str[i] in one_to_nine: # if the string contain the digit,\n",
    "            return x_str[i] # return that digit\n",
    "            break # break since we found last digit\n",
    "    else: # if nothing found,\n",
    "        return str(0) # return 0\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ca46fa1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'5'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ld(-123.45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9e2863cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ld(42000.00)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dc42cb9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ld(0.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca4071d5",
   "metadata": {},
   "source": [
    "Now we have our 2 methods ready, we will be exploring two CSV file and one text file then find a pattern with the methods."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58fd35e6",
   "metadata": {},
   "source": [
    "## Part 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de889e0f",
   "metadata": {},
   "source": [
    "### Country Area "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6d36107",
   "metadata": {},
   "source": [
    "Our first data is an information that contains the size of each country in two units.($km^2$, $mi^2$)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3c32a585",
   "metadata": {},
   "outputs": [],
   "source": [
    "CA=pd.read_csv(\"country_areas.csv\" # filename\n",
    "                   ,delimiter=\",\" # delimiter\n",
    "                   ,skiprows=2 #number of rows to skip\n",
    "                   ,header=0 # row number where the header is\n",
    "                   ,encoding='latin1'\n",
    "                   ,low_memory=False)\n",
    "CA=CA.fillna(0) # fill 0 where data is empty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0ce44c67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Area (sq km)</th>\n",
       "      <th>Area (sq miles)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>652860.0</td>\n",
       "      <td>252071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>28750.0</td>\n",
       "      <td>11100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>DZA</td>\n",
       "      <td>2381740.0</td>\n",
       "      <td>919595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>American Samoa</td>\n",
       "      <td>ASM</td>\n",
       "      <td>200.0</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Andorra</td>\n",
       "      <td>AND</td>\n",
       "      <td>470.0</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>1246700.0</td>\n",
       "      <td>481353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>ATG</td>\n",
       "      <td>440.0</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>ARG</td>\n",
       "      <td>2780400.0</td>\n",
       "      <td>1073518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Armenia</td>\n",
       "      <td>ARM</td>\n",
       "      <td>29740.0</td>\n",
       "      <td>11483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>180.0</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Country Name Country Code  Area (sq km)  Area (sq miles)\n",
       "0          Afghanistan          AFG      652860.0           252071\n",
       "1              Albania          ALB       28750.0            11100\n",
       "2              Algeria          DZA     2381740.0           919595\n",
       "3       American Samoa          ASM         200.0               77\n",
       "4              Andorra          AND         470.0              182\n",
       "5               Angola          AGO     1246700.0           481353\n",
       "6  Antigua and Barbuda          ATG         440.0              170\n",
       "7            Argentina          ARG     2780400.0          1073518\n",
       "8              Armenia          ARM       29740.0            11483\n",
       "9                Aruba          ABW         180.0               70"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CA.head(10) #first ten rows of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5a64153e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      6\n",
       "1      2\n",
       "2      2\n",
       "3      2\n",
       "4      4\n",
       "      ..\n",
       "205    3\n",
       "206    6\n",
       "207    5\n",
       "208    7\n",
       "209    3\n",
       "Name: Area (sq km), Length: 210, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CA_kmf = CA[\"Area (sq km)\"].apply(fd) # apply first digit function to km unit values\n",
    "CA_kmf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "aa6a389b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      6\n",
       "1      5\n",
       "2      4\n",
       "3      2\n",
       "4      7\n",
       "      ..\n",
       "205    5\n",
       "206    2\n",
       "207    7\n",
       "208    1\n",
       "209    6\n",
       "Name: Area (sq km), Length: 210, dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CA_kml = CA[\"Area (sq km)\"].apply(ld) # apply last digit function to km unit values\n",
    "CA_kml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c643c9a4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    60\n",
       "2    37\n",
       "3    25\n",
       "4    24\n",
       "5    16\n",
       "6    13\n",
       "7    15\n",
       "8     9\n",
       "9    11\n",
       "Name: Area (sq km), dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CA_kmf_count= pd.Index(CA_kmf).value_counts().sort_index() # count how many times used for each digit(1~9)\n",
    "CA_kmf_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f5142ce9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    18\n",
       "2    24\n",
       "3    20\n",
       "4    25\n",
       "5    26\n",
       "6    28\n",
       "7    31\n",
       "8    17\n",
       "9    21\n",
       "Name: Area (sq km), dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CA_kml_count= pd.Index(CA_kml).value_counts().sort_index() # count how many times used for each digit(1~9)\n",
    "CA_kml_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "689343e8",
   "metadata": {},
   "source": [
    "Country area in miles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "038ee973",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      2\n",
       "1      1\n",
       "2      9\n",
       "3      7\n",
       "4      1\n",
       "      ..\n",
       "205    1\n",
       "206    2\n",
       "207    2\n",
       "208    2\n",
       "209    1\n",
       "Name: Area (sq miles), Length: 210, dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CA_mif = CA[\"Area (sq miles)\"].apply(fd) # apply first digit function to mi unit values\n",
    "CA_mif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "51472e83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      1\n",
       "2      5\n",
       "3      7\n",
       "4      2\n",
       "      ..\n",
       "205    5\n",
       "206    4\n",
       "207    5\n",
       "208    4\n",
       "209    3\n",
       "Name: Area (sq miles), Length: 210, dtype: object"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CA_mil = CA[\"Area (sq miles)\"].apply(ld) # apply last digit function to mi unit values\n",
    "CA_mil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "db104f53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    72\n",
       "2    34\n",
       "3    28\n",
       "4    24\n",
       "5     9\n",
       "6    11\n",
       "7    15\n",
       "8     7\n",
       "9    10\n",
       "Name: Area (sq miles), dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CA_mif_count= pd.Index(CA_mif).value_counts().sort_index() # count how many times used for each digit(1~9)\n",
    "CA_mif_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a8a5e02b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    25\n",
       "2    22\n",
       "3    31\n",
       "4    23\n",
       "5    21\n",
       "6    21\n",
       "7    26\n",
       "8    18\n",
       "9    23\n",
       "Name: Area (sq miles), dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CA_mil_count= pd.Index(CA_mil).value_counts().sort_index() # count how many times used for each digit(1~9)\n",
    "CA_mil_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8fde1686",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0.98, 'Fd & Ld of km&mile')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=[1,2,3,4,5,6,7,8,9] # digits we consider\n",
    "\n",
    "plt.figure(figsize=(10,10))\n",
    "\n",
    "# plot of first digits count in km\n",
    "plt.subplot(2,2,1)\n",
    "plt.bar(x,CA_kmf_count,color='r')\n",
    "plt.title('front digit of km',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digits count in km\n",
    "plt.subplot(2,2,2)\n",
    "plt.bar(x,CA_kml_count,color='b')\n",
    "plt.title('last digit of km',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of first digits count in mi\n",
    "plt.subplot(2,2,3)\n",
    "plt.bar(x,CA_mif_count,color='g')\n",
    "plt.title('front digit of mile',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digits count in mi\n",
    "plt.subplot(2,2,4)\n",
    "plt.bar(x,CA_mil_count,color='m')\n",
    "plt.title('last digit of mile',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "plt.suptitle('Fd & Ld of km&mile',fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab29dc09",
   "metadata": {},
   "source": [
    "### Analyze"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb01c690",
   "metadata": {},
   "source": [
    "From the histogram result, both area in km and miles front digit of 1 were returned the most.\n",
    "For the last digits, area in km returned 7 as most used and 3 in miles.\n",
    "\n",
    "First, we observe the pattern for the first digit by checking the max, min, and average."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "95ee663c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17098250.0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maxkm = CA[\"Area (sq km)\"].max() #maximum of km value\n",
    "maxkm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "06874b7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "minkm = CA[\"Area (sq km)\"].min() # minimum of km value\n",
    "minkm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1f30d30f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "636708.9357142857"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avgkm = CA[\"Area (sq km)\"].mean() # average of km value\n",
    "avgkm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d35873ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "105945.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "middlekm = CA[\"Area (sq km)\"].median() # median of km value\n",
    "middlekm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2d0372d",
   "metadata": {},
   "source": [
    "Area($km^2$)\n",
    "\n",
    "While the maximum was 17,098,250, minimum was 2, average was 636,708, and median was 105,945, we were able to find out that 1 has the most probability to occur. \n",
    "\n",
    "By looking at the range of area in km, 0 ~ 10,000,000 contains each digits evenly distributed. \n",
    "\n",
    "However, the range continues further until 17,098,250 which any countries above 10,000,000 will return 1 as a first digit. \n",
    "\n",
    "Also, we can make one assumption for 1 being most used since the median appears to be 105,945. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f5640ffb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6601669"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maxmi = CA[\"Area (sq miles)\"].max() # maximum of mile value\n",
    "maxmi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "24b848af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "minmi = CA[\"Area (sq miles)\"].min() # minimum of mile value\n",
    "minmi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9de10293",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "245834.6476190476"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avgmi = CA[\"Area (sq miles)\"].mean() # average of mile value\n",
    "avgmi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c20444e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40906.0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "middlemi = CA[\"Area (sq miles)\"].median() # median of mile value\n",
    "middlemi"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e47a2fea",
   "metadata": {},
   "source": [
    "Area($mi^2$)\n",
    "\n",
    "While the maximum was 6,601,669, minimum was 1, average was 245,834, and median was 40,906, we were able to find out that 1 has the mostly occured. \n",
    "\n",
    "Converting square kilometers to square miles is \n",
    "$$ 1km^2 \\approx 0.3861 mi^2$$\n",
    "\n",
    "While we made assumption above, if most of the values are distributed around 100,000 $km^2$, then $mi^2$ must return 4 as most. However, since 1 is still the most used first digit, we can verify the range more specific by considering the median and average. \n",
    "\n",
    "While the conversion of 100,000 ~ 199,999 $mi^2$ is about 260,000 ~ 518,000 $km^2$, and those range fall in between the median of 105,945 $km^2$ and average of 636,708 $km^2$,\n",
    "\n",
    "we are able to conclude most of countries area are distributed in range between 260,000~518,000 $km^2$ and the range 0 ~ 17,098,250 $km^2$ have returned 1 as first digit that mostly used.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ba48c28",
   "metadata": {},
   "source": [
    "However, there are no pattern found in last digit for both units. 7 was the most used in $km^2$ and 3 for $mi^2$.\n",
    "\n",
    "last digits were almost equally distributed since they had equal probability to be used. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3be2ea4",
   "metadata": {},
   "source": [
    "### Country Populations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a747d8d",
   "metadata": {},
   "source": [
    "Our second data contains information of populations for each country since 1960 to 2014."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "fe733055",
   "metadata": {},
   "outputs": [],
   "source": [
    "CP=pd.read_csv(\"country_populations.csv\" # filename\n",
    "                   ,delimiter=\",\" # delimiter\n",
    "                   ,skiprows=0 #number of rows to skip\n",
    "                   ,header=0 # row number where the header is\n",
    "                   ,encoding='latin1'\n",
    "                   ,low_memory=False)\n",
    "CP=CP.fillna(0) # fill with 0 where the data is empty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0da4763f",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>1960</th>\n",
       "      <th>1961</th>\n",
       "      <th>1962</th>\n",
       "      <th>1963</th>\n",
       "      <th>1964</th>\n",
       "      <th>1965</th>\n",
       "      <th>1966</th>\n",
       "      <th>1967</th>\n",
       "      <th>...</th>\n",
       "      <th>2005</th>\n",
       "      <th>2006</th>\n",
       "      <th>2007</th>\n",
       "      <th>2008</th>\n",
       "      <th>2009</th>\n",
       "      <th>2010</th>\n",
       "      <th>2011</th>\n",
       "      <th>2012</th>\n",
       "      <th>2013</th>\n",
       "      <th>2014</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>8994793.0</td>\n",
       "      <td>9164945.0</td>\n",
       "      <td>9343772.0</td>\n",
       "      <td>9531555.0</td>\n",
       "      <td>9728645.0</td>\n",
       "      <td>9935358.0</td>\n",
       "      <td>10148841.0</td>\n",
       "      <td>10368600.0</td>\n",
       "      <td>...</td>\n",
       "      <td>24399948</td>\n",
       "      <td>25183615</td>\n",
       "      <td>25877544</td>\n",
       "      <td>26528741</td>\n",
       "      <td>27207291</td>\n",
       "      <td>27962207</td>\n",
       "      <td>28809167</td>\n",
       "      <td>29726803</td>\n",
       "      <td>30682500</td>\n",
       "      <td>31627506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>1608800.0</td>\n",
       "      <td>1659800.0</td>\n",
       "      <td>1711319.0</td>\n",
       "      <td>1762621.0</td>\n",
       "      <td>1814135.0</td>\n",
       "      <td>1864791.0</td>\n",
       "      <td>1914573.0</td>\n",
       "      <td>1965598.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3011487</td>\n",
       "      <td>2992547</td>\n",
       "      <td>2970017</td>\n",
       "      <td>2947314</td>\n",
       "      <td>2927519</td>\n",
       "      <td>2913021</td>\n",
       "      <td>2904780</td>\n",
       "      <td>2900489</td>\n",
       "      <td>2897366</td>\n",
       "      <td>2894475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>DZA</td>\n",
       "      <td>11124892.0</td>\n",
       "      <td>11404859.0</td>\n",
       "      <td>11690152.0</td>\n",
       "      <td>11985130.0</td>\n",
       "      <td>12295973.0</td>\n",
       "      <td>12626953.0</td>\n",
       "      <td>12980269.0</td>\n",
       "      <td>13354197.0</td>\n",
       "      <td>...</td>\n",
       "      <td>33267887</td>\n",
       "      <td>33749328</td>\n",
       "      <td>34261971</td>\n",
       "      <td>34811059</td>\n",
       "      <td>35401790</td>\n",
       "      <td>36036159</td>\n",
       "      <td>36717132</td>\n",
       "      <td>37439427</td>\n",
       "      <td>38186135</td>\n",
       "      <td>38934334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>American Samoa</td>\n",
       "      <td>ASM</td>\n",
       "      <td>20012.0</td>\n",
       "      <td>20478.0</td>\n",
       "      <td>21118.0</td>\n",
       "      <td>21883.0</td>\n",
       "      <td>22701.0</td>\n",
       "      <td>23518.0</td>\n",
       "      <td>24320.0</td>\n",
       "      <td>25116.0</td>\n",
       "      <td>...</td>\n",
       "      <td>59117</td>\n",
       "      <td>58648</td>\n",
       "      <td>57904</td>\n",
       "      <td>57031</td>\n",
       "      <td>56226</td>\n",
       "      <td>55636</td>\n",
       "      <td>55316</td>\n",
       "      <td>55227</td>\n",
       "      <td>55302</td>\n",
       "      <td>55434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Andorra</td>\n",
       "      <td>AND</td>\n",
       "      <td>13414.0</td>\n",
       "      <td>14376.0</td>\n",
       "      <td>15376.0</td>\n",
       "      <td>16410.0</td>\n",
       "      <td>17470.0</td>\n",
       "      <td>18551.0</td>\n",
       "      <td>19646.0</td>\n",
       "      <td>20755.0</td>\n",
       "      <td>...</td>\n",
       "      <td>81223</td>\n",
       "      <td>83373</td>\n",
       "      <td>84878</td>\n",
       "      <td>85616</td>\n",
       "      <td>85474</td>\n",
       "      <td>84419</td>\n",
       "      <td>82326</td>\n",
       "      <td>79316</td>\n",
       "      <td>75902</td>\n",
       "      <td>72786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>5270844.0</td>\n",
       "      <td>5367287.0</td>\n",
       "      <td>5465905.0</td>\n",
       "      <td>5565808.0</td>\n",
       "      <td>5665701.0</td>\n",
       "      <td>5765025.0</td>\n",
       "      <td>5863568.0</td>\n",
       "      <td>5962831.0</td>\n",
       "      <td>...</td>\n",
       "      <td>17912942</td>\n",
       "      <td>18541467</td>\n",
       "      <td>19183907</td>\n",
       "      <td>19842251</td>\n",
       "      <td>20520103</td>\n",
       "      <td>21219954</td>\n",
       "      <td>21942296</td>\n",
       "      <td>22685632</td>\n",
       "      <td>23448202</td>\n",
       "      <td>24227524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>ATG</td>\n",
       "      <td>54681.0</td>\n",
       "      <td>55403.0</td>\n",
       "      <td>56311.0</td>\n",
       "      <td>57368.0</td>\n",
       "      <td>58500.0</td>\n",
       "      <td>59653.0</td>\n",
       "      <td>60818.0</td>\n",
       "      <td>62002.0</td>\n",
       "      <td>...</td>\n",
       "      <td>82565</td>\n",
       "      <td>83467</td>\n",
       "      <td>84397</td>\n",
       "      <td>85350</td>\n",
       "      <td>86300</td>\n",
       "      <td>87233</td>\n",
       "      <td>88152</td>\n",
       "      <td>89069</td>\n",
       "      <td>89985</td>\n",
       "      <td>90900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>ARG</td>\n",
       "      <td>20619075.0</td>\n",
       "      <td>20953079.0</td>\n",
       "      <td>21287682.0</td>\n",
       "      <td>21621845.0</td>\n",
       "      <td>21953926.0</td>\n",
       "      <td>22283389.0</td>\n",
       "      <td>22608747.0</td>\n",
       "      <td>22932201.0</td>\n",
       "      <td>...</td>\n",
       "      <td>39145491</td>\n",
       "      <td>39558750</td>\n",
       "      <td>39969903</td>\n",
       "      <td>40381860</td>\n",
       "      <td>40798641</td>\n",
       "      <td>41222875</td>\n",
       "      <td>41655616</td>\n",
       "      <td>42095224</td>\n",
       "      <td>42538304</td>\n",
       "      <td>42980026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Armenia</td>\n",
       "      <td>ARM</td>\n",
       "      <td>1867396.0</td>\n",
       "      <td>1934239.0</td>\n",
       "      <td>2002170.0</td>\n",
       "      <td>2070427.0</td>\n",
       "      <td>2138133.0</td>\n",
       "      <td>2204650.0</td>\n",
       "      <td>2269475.0</td>\n",
       "      <td>2332624.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3014917</td>\n",
       "      <td>3002161</td>\n",
       "      <td>2988117</td>\n",
       "      <td>2975029</td>\n",
       "      <td>2966108</td>\n",
       "      <td>2963496</td>\n",
       "      <td>2967984</td>\n",
       "      <td>2978339</td>\n",
       "      <td>2992192</td>\n",
       "      <td>3006154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>54208.0</td>\n",
       "      <td>55435.0</td>\n",
       "      <td>56226.0</td>\n",
       "      <td>56697.0</td>\n",
       "      <td>57029.0</td>\n",
       "      <td>57360.0</td>\n",
       "      <td>57712.0</td>\n",
       "      <td>58049.0</td>\n",
       "      <td>...</td>\n",
       "      <td>100031</td>\n",
       "      <td>100830</td>\n",
       "      <td>101218</td>\n",
       "      <td>101342</td>\n",
       "      <td>101416</td>\n",
       "      <td>101597</td>\n",
       "      <td>101936</td>\n",
       "      <td>102393</td>\n",
       "      <td>102921</td>\n",
       "      <td>103441</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 57 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Country Name Country Code        1960        1961        1962  \\\n",
       "0          Afghanistan          AFG   8994793.0   9164945.0   9343772.0   \n",
       "1              Albania          ALB   1608800.0   1659800.0   1711319.0   \n",
       "2              Algeria          DZA  11124892.0  11404859.0  11690152.0   \n",
       "3       American Samoa          ASM     20012.0     20478.0     21118.0   \n",
       "4              Andorra          AND     13414.0     14376.0     15376.0   \n",
       "5               Angola          AGO   5270844.0   5367287.0   5465905.0   \n",
       "6  Antigua and Barbuda          ATG     54681.0     55403.0     56311.0   \n",
       "7            Argentina          ARG  20619075.0  20953079.0  21287682.0   \n",
       "8              Armenia          ARM   1867396.0   1934239.0   2002170.0   \n",
       "9                Aruba          ABW     54208.0     55435.0     56226.0   \n",
       "\n",
       "         1963        1964        1965        1966        1967  ...      2005  \\\n",
       "0   9531555.0   9728645.0   9935358.0  10148841.0  10368600.0  ...  24399948   \n",
       "1   1762621.0   1814135.0   1864791.0   1914573.0   1965598.0  ...   3011487   \n",
       "2  11985130.0  12295973.0  12626953.0  12980269.0  13354197.0  ...  33267887   \n",
       "3     21883.0     22701.0     23518.0     24320.0     25116.0  ...     59117   \n",
       "4     16410.0     17470.0     18551.0     19646.0     20755.0  ...     81223   \n",
       "5   5565808.0   5665701.0   5765025.0   5863568.0   5962831.0  ...  17912942   \n",
       "6     57368.0     58500.0     59653.0     60818.0     62002.0  ...     82565   \n",
       "7  21621845.0  21953926.0  22283389.0  22608747.0  22932201.0  ...  39145491   \n",
       "8   2070427.0   2138133.0   2204650.0   2269475.0   2332624.0  ...   3014917   \n",
       "9     56697.0     57029.0     57360.0     57712.0     58049.0  ...    100031   \n",
       "\n",
       "       2006      2007      2008      2009      2010      2011      2012  \\\n",
       "0  25183615  25877544  26528741  27207291  27962207  28809167  29726803   \n",
       "1   2992547   2970017   2947314   2927519   2913021   2904780   2900489   \n",
       "2  33749328  34261971  34811059  35401790  36036159  36717132  37439427   \n",
       "3     58648     57904     57031     56226     55636     55316     55227   \n",
       "4     83373     84878     85616     85474     84419     82326     79316   \n",
       "5  18541467  19183907  19842251  20520103  21219954  21942296  22685632   \n",
       "6     83467     84397     85350     86300     87233     88152     89069   \n",
       "7  39558750  39969903  40381860  40798641  41222875  41655616  42095224   \n",
       "8   3002161   2988117   2975029   2966108   2963496   2967984   2978339   \n",
       "9    100830    101218    101342    101416    101597    101936    102393   \n",
       "\n",
       "       2013      2014  \n",
       "0  30682500  31627506  \n",
       "1   2897366   2894475  \n",
       "2  38186135  38934334  \n",
       "3     55302     55434  \n",
       "4     75902     72786  \n",
       "5  23448202  24227524  \n",
       "6     89985     90900  \n",
       "7  42538304  42980026  \n",
       "8   2992192   3006154  \n",
       "9    102921    103441  \n",
       "\n",
       "[10 rows x 57 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP.head(10) # print first 10 rows of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8b3013b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      3\n",
       "2      2\n",
       "3      4\n",
       "4      5\n",
       "      ..\n",
       "206    6\n",
       "207    1\n",
       "208    1\n",
       "209    8\n",
       "210    1\n",
       "Name: 1990, Length: 211, dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP_1990f = CP[\"1990\"].apply(fd) # apply first digit function to 1990 population values\n",
    "CP_1990f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3a4a1140",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      7\n",
       "1      2\n",
       "2      4\n",
       "3      4\n",
       "4      1\n",
       "      ..\n",
       "206    7\n",
       "207    3\n",
       "208    9\n",
       "209    2\n",
       "210    1\n",
       "Name: 1990, Length: 211, dtype: object"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP_1990l = CP[\"1990\"].apply(ld) # apply last digit function to 1990 population values\n",
    "CP_1990l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a19e7362",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      3\n",
       "2      3\n",
       "3      5\n",
       "4      6\n",
       "      ..\n",
       "206    7\n",
       "207    1\n",
       "208    1\n",
       "209    1\n",
       "210    1\n",
       "Name: 2000, Length: 211, dtype: object"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP_2000f = CP[\"2000\"].apply(fd) # apply first digit function to 2000 population values\n",
    "CP_2000f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b9d32ec5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      4\n",
       "1      7\n",
       "2      8\n",
       "3      2\n",
       "4      9\n",
       "      ..\n",
       "206    9\n",
       "207    9\n",
       "208    9\n",
       "209    2\n",
       "210    1\n",
       "Name: 2000, Length: 211, dtype: object"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP_2000l = CP[\"2000\"].apply(ld) # apply last digit function to 2000 population values\n",
    "CP_2000l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0890db9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      2\n",
       "1      2\n",
       "2      3\n",
       "3      5\n",
       "4      8\n",
       "      ..\n",
       "206    8\n",
       "207    1\n",
       "208    2\n",
       "209    1\n",
       "210    1\n",
       "Name: 2010, Length: 211, dtype: object"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP_2010f = CP[\"2010\"].apply(fd) # apply first digit function to 2010 population values\n",
    "CP_2010f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "6b1220d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      7\n",
       "1      1\n",
       "2      9\n",
       "3      6\n",
       "4      9\n",
       "      ..\n",
       "206    5\n",
       "207    7\n",
       "208    2\n",
       "209    9\n",
       "210    7\n",
       "Name: 2010, Length: 211, dtype: object"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP_2010l = CP[\"2010\"].apply(ld) # apply last digit function to 2010 population values\n",
    "CP_2010l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "3697c979",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    61\n",
       "2    31\n",
       "3    26\n",
       "4    25\n",
       "5    21\n",
       "6     9\n",
       "7    17\n",
       "8     9\n",
       "9    12\n",
       "Name: 1990, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP1990f_count= pd.Index(CP_1990f).value_counts().sort_index() # return counted values with sorted index\n",
    "CP1990f_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "57bd29ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    22\n",
       "2    26\n",
       "3    17\n",
       "4    26\n",
       "5    25\n",
       "6    24\n",
       "7    17\n",
       "8    24\n",
       "9    30\n",
       "Name: 1990, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP1990l_count= pd.Index(CP_1990l).value_counts().sort_index() # return counted values with sorted index\n",
    "CP1990l_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6b7a7464",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    66\n",
       "2    30\n",
       "3    26\n",
       "4    23\n",
       "5    18\n",
       "6    18\n",
       "7     9\n",
       "8    15\n",
       "9     6\n",
       "Name: 2000, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP2000f_count= pd.Index(CP_2000f).value_counts().sort_index() # return counted values with sorted index\n",
    "CP2000f_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ffafb0cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    21\n",
       "2    23\n",
       "3    27\n",
       "4    17\n",
       "5    27\n",
       "6    25\n",
       "7    20\n",
       "8    28\n",
       "9    23\n",
       "Name: 2000, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP2000l_count= pd.Index(CP_2000l).value_counts().sort_index() # return counted values with sorted index\n",
    "CP2000l_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "511279f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    59\n",
       "2    37\n",
       "3    26\n",
       "4    20\n",
       "5    20\n",
       "6    14\n",
       "7    12\n",
       "8    12\n",
       "9    11\n",
       "Name: 2010, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP2010f_count= pd.Index(CP_2010f).value_counts().sort_index() # return counted values with sorted index\n",
    "CP2010f_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "061a61bd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    17\n",
       "2    22\n",
       "3    23\n",
       "4    23\n",
       "5    24\n",
       "6    28\n",
       "7    36\n",
       "8    17\n",
       "9    21\n",
       "Name: 2010, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CP2010l_count= pd.Index(CP_2010l).value_counts().sort_index() # return counted values with sorted index\n",
    "CP2010l_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b4f00f4",
   "metadata": {},
   "source": [
    "Plot the result into histogram for better visual"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "554ce248",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0.98, 'Fd & Ld of populations')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=[1,2,3,4,5,6,7,8,9] # digits we consider\n",
    "\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.subplots_adjust(wspace=0.4,hspace=0.5)\n",
    "\n",
    "# plot of first digits count in 1990 population\n",
    "plt.subplot(3,2,1)\n",
    "plt.bar(x,CP1990f_count,color='r')\n",
    "plt.title('front digit of 1990 population',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digits count in 1990 population\n",
    "plt.subplot(3,2,2)\n",
    "plt.bar(x,CP1990l_count,color='b')\n",
    "plt.title('last digit of 1990 population',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of first digits count in 2000 population\n",
    "plt.subplot(3,2,3)\n",
    "plt.bar(x,CP2000f_count,color='r')\n",
    "plt.title('front digit of 2000 population',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digits count in 2000 population\n",
    "\n",
    "plt.subplot(3,2,4)\n",
    "plt.bar(x,CP2000l_count,color='b')\n",
    "plt.title('last digit of 2000 population',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of first digits count in 2010 population\n",
    "plt.subplot(3,2,5)\n",
    "plt.bar(x,CP2010f_count,color='r')\n",
    "plt.title('front digit of 2010 population',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digits count in 2010 population\n",
    "plt.subplot(3,2,6)\n",
    "plt.bar(x,CP2010l_count,color='b')\n",
    "plt.title('last digit of 2010 population',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "plt.suptitle('Fd & Ld of populations',fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a03c4330",
   "metadata": {},
   "source": [
    "### Analyze"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ca0323d",
   "metadata": {},
   "source": [
    "We have histogram of first digit and last digit of 1990, 2000, 2010.\n",
    "\n",
    "First digit of all three years returned 1 as most used. \n",
    "\n",
    "Last digit from 1990 returned 9, 2000 returned 8, and 2010 returned 7 as most used.\n",
    "\n",
    "First, we observe the pattern for the first digit by checking the max, min, average, and median."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e0faf8be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1135185000 \n",
      " 9004 \n",
      " 26551779.274881516 \n",
      " 4660000.0\n"
     ]
    }
   ],
   "source": [
    "max90 = CP[\"1990\"].max() # maximum value\n",
    "min90 = CP[\"1990\"].min() #minimum value\n",
    "avg90 = CP[\"1990\"].mean() # average value\n",
    "middle90 = CP[\"1990\"].median() #median value\n",
    "\n",
    "print(max90,'\\n',min90,'\\n',avg90,'\\n',middle90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c4b3d3e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1262645000 \n",
      " 9419 \n",
      " 30512651.668246444 \n",
      " 5337264.0\n"
     ]
    }
   ],
   "source": [
    "max00 = CP[\"2000\"].max() # maximum value\n",
    "min00 = CP[\"2000\"].min() # minimum value\n",
    "avg00 = CP[\"2000\"].mean() # average value\n",
    "middle00 = CP[\"2000\"].median() # median value\n",
    "\n",
    "print(max00,'\\n',min00,'\\n',avg00,'\\n',middle00)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "86768267",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1337705000 \n",
      " 9827 \n",
      " 34365176.293838866 \n",
      " 6209877.0\n"
     ]
    }
   ],
   "source": [
    "max10 = CP[\"2010\"].max() # maximum value\n",
    "min10 = CP[\"2010\"].min() # minimum value\n",
    "avg10 = CP[\"2010\"].mean() # average value\n",
    "middle10 = CP[\"2010\"].median() # median value\n",
    "\n",
    "print(max10,'\\n',min10,'\\n',avg10,'\\n',middle10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e840d6a",
   "metadata": {},
   "source": [
    "As we can see the range of populations are approximately between 9,000 ~ 1,340,000,000.\n",
    "\n",
    "This describes 1 possess the most high probability to be used.\n",
    "\n",
    "While 10,000 ~ 1,000,000,000 have equal probability for digits to be used, population range continues until 1,340,000,000 which only first digit of 1 is used. \n",
    "\n",
    "Since average of all three years are around 25,000,000 ~ 35,000,000, digits of 2 and 3 takes the second and third most usage. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "deb84e84",
   "metadata": {},
   "source": [
    "However, last digit from all three years do not have clear pattern found. Since the last digit have equal probability usage, they do not have big difference in usage according to the histogram result."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a47e23e",
   "metadata": {},
   "source": [
    "## Part 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e37840a",
   "metadata": {},
   "source": [
    "For this part, we will be analyzing the numbers from a text file.\n",
    "\n",
    "Since text files do not consist of only numbers, preprocessing is required to use them as above.\n",
    "\n",
    "Therefore, we will be using `regular expression` to extract only word that contains number.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5393054",
   "metadata": {},
   "source": [
    "First, we read a text file and save as `NYT`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "3698b336",
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open(\"NYT_2010_06_01.txt\", 'r') # open text file to read\n",
    "NYT = f.read() # save text as NYT\n",
    "f.close() # close file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "95a7e435",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' \\nFederal Deposit Insurance Corp brokers sale of Puerto Rican banks Eurobank, R-G Premier Bank and W'"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NYT[:100]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3f5094a",
   "metadata": {},
   "source": [
    "In regular expression, we will divide each word separated by space. Between each space, if the letter contains at least one digit despite the letters are included, it return all into list `NYT_num`.\n",
    "\n",
    "* Due to limitation of regular expression, some of the numbers are not included such as characters between numbers ex(phone number, floats...)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6979862c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[' 40 ', ' 2007', '9 ', ' 1967 ', ' 2010', ' 24 ', '32 ', '9', '1', '20']"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NYT_num = re.findall(r'\\b\\s*\\d+\\s*\\b',NYT) # find word => <letter 0 or more + digit of 1 or more + letter 0 or more>\n",
    "NYT_num[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b3582d4",
   "metadata": {},
   "source": [
    "As we have our extracted data, create a dataframe with column named `numbers`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "257ba7f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>numbers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1110</th>\n",
       "      <td>1988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1111</th>\n",
       "      <td>2004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1112</th>\n",
       "      <td>1999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1113</th>\n",
       "      <td>2005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1114</th>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1115 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     numbers\n",
       "0        40 \n",
       "1       2007\n",
       "2         9 \n",
       "3      1967 \n",
       "4       2010\n",
       "...      ...\n",
       "1110   1988 \n",
       "1111    2004\n",
       "1112    1999\n",
       "1113    2005\n",
       "1114    120 \n",
       "\n",
       "[1115 rows x 1 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_data = pd.DataFrame(NYT_num,columns=[\"numbers\"]) # convert into pandas dataframe with column named \"numbers\"\n",
    "num_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ab10b39",
   "metadata": {},
   "source": [
    "As we found 1,115 of numbers, we can apply our front digit & last digit function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7c3ad97a",
   "metadata": {},
   "outputs": [],
   "source": [
    "NYT_front = num_data[\"numbers\"].apply(fd) # apply front digit function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "c32db78f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     46\n",
       "1    308\n",
       "2    273\n",
       "3    123\n",
       "4     97\n",
       "5     95\n",
       "6     50\n",
       "7     48\n",
       "8     46\n",
       "9     29\n",
       "Name: numbers, dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NYT_front_count= pd.Index(NYT_front).value_counts().sort_index() # return counted values with sorted index\n",
    "NYT_front_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "f49df67a",
   "metadata": {},
   "outputs": [],
   "source": [
    "NYT_last = num_data[\"numbers\"].apply(ld) # apply last digit function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "9af8015d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     46\n",
       "1    193\n",
       "2    159\n",
       "3    121\n",
       "4    110\n",
       "5    155\n",
       "6     71\n",
       "7     91\n",
       "8     99\n",
       "9     70\n",
       "Name: numbers, dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NYT_last_count= pd.Index(NYT_last).value_counts().sort_index() # return counted values with sorted index\n",
    "NYT_last_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "890addbc",
   "metadata": {},
   "source": [
    "Plot the result in histogram for better visual"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "5c86b80c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0.98, 'Fd & Ld of NYT numbers')"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=[0,1,2,3,4,5,6,7,8,9] # digits\n",
    "\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.subplots_adjust(wspace=0.4,hspace=0.5)\n",
    "\n",
    "# plot of first digit count of NYT numbers\n",
    "plt.subplot(2,1,1)\n",
    "plt.bar(x,NYT_front_count,color='r')\n",
    "plt.title('front digit of NYT numbers',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digit count of NYT numbers\n",
    "plt.subplot(2,1,2)\n",
    "plt.bar(x,NYT_last_count,color='b')\n",
    "plt.title('last digit of NYT numbers',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "plt.suptitle('Fd & Ld of NYT numbers',fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca534eff",
   "metadata": {},
   "source": [
    "### Analyze"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e77718a",
   "metadata": {},
   "source": [
    "From the histogram result, front digit of 1 returned the most from New York Times text file and last digit also returned 1 as most usage from New York Times."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7cccdf1",
   "metadata": {},
   "source": [
    "We will be checking the possible reason why 1 returned the most.\n",
    "\n",
    "While the total count of numbers are 1,115, find out how many digits each number consists of."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "c2c60096",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1115"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(NYT_num) # length of numbers included word"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93429304",
   "metadata": {},
   "source": [
    "Below shows there are no digits consisted of 5 or greater."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "e4ddddfe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "morethan4_digits = re.findall(r'\\b\\s*\\d{5,}\\s*\\b',NYT) # word that contains 5 or more digits\n",
    "morethan4_digits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f859889",
   "metadata": {},
   "source": [
    "Therefore, we check through 1 to 4 digits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f9870347",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "287"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one_digit = re.findall(r'\\b\\s*\\d{1}\\s*\\b',NYT) # word that contains 1 digit\n",
    "len(one_digit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "ddae3df5",
   "metadata": {},
   "outputs": [],
   "source": [
    "one_data = pd.DataFrame(one_digit,columns=[\"1number\"]) # convert to pandas dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3201ab89",
   "metadata": {},
   "outputs": [],
   "source": [
    "one_front = one_data[\"1number\"].apply(fd) # apply first digit function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "876cb461",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     2\n",
       "1    58\n",
       "2    50\n",
       "3    43\n",
       "4    29\n",
       "5    32\n",
       "6    22\n",
       "7    21\n",
       "8    17\n",
       "9    13\n",
       "Name: 1number, dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one_front_count= pd.Index(one_front).value_counts().sort_index() # return counted values with sorted index\n",
    "one_front_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "d315b574",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "442"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "two_digits = re.findall(r'\\b\\s*\\d{2}\\s*\\b',NYT) # word that contains 2 digits\n",
    "len(two_digits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "a8ea1e10",
   "metadata": {},
   "outputs": [],
   "source": [
    "two_data = pd.DataFrame(two_digits,columns=[\"2numbers\"]) # convert to pandas dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "25ec0192",
   "metadata": {},
   "outputs": [],
   "source": [
    "two_front = two_data[\"2numbers\"].apply(fd) # apply first digit functionb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "93024d3a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    130\n",
       "2     83\n",
       "3     58\n",
       "4     51\n",
       "5     41\n",
       "6     23\n",
       "7     20\n",
       "8     24\n",
       "9     12\n",
       "Name: 2numbers, dtype: int64"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "two_front_count= pd.Index(two_front).value_counts().sort_index() # return counted values with sorted index\n",
    "two_front_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d328385",
   "metadata": {},
   "source": [
    "While count for 0 is none, we add missing index for plot below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "eb09bd79",
   "metadata": {},
   "outputs": [],
   "source": [
    "two_front_count = list(two_front_count) # convert to list\n",
    "two_front_count.insert(0,0) # insert values that are missing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "7ee92b94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "209"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "three_digits = re.findall(r'\\b\\s*\\d{3}\\s*\\b',NYT) # word that contains 3 digits\n",
    "len(three_digits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "05507988",
   "metadata": {},
   "outputs": [],
   "source": [
    "three_data = pd.DataFrame(three_digits,columns=[\"3numbers\"]) # convert to pandas dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "64452798",
   "metadata": {},
   "outputs": [],
   "source": [
    "three_front = three_data[\"3numbers\"].apply(fd) # apply first digit function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "78baaac4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    44\n",
       "1    56\n",
       "2    32\n",
       "3    20\n",
       "4    16\n",
       "5    21\n",
       "6     5\n",
       "7     6\n",
       "8     5\n",
       "9     4\n",
       "Name: 3numbers, dtype: int64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "three_front_count= pd.Index(three_front).value_counts().sort_index() # return counted values with sorted index\n",
    "three_front_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "6d64febf",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "177"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "four_digits = re.findall(r'\\b\\s*\\d{4}\\s*\\b',NYT) # word that contains 4 digits\n",
    "len(four_digits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "422cf727",
   "metadata": {},
   "outputs": [],
   "source": [
    "four_data = pd.DataFrame(four_digits,columns=[\"4numbers\"]) # convert to pandas dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "2926040e",
   "metadata": {},
   "outputs": [],
   "source": [
    "four_front = four_data[\"4numbers\"].apply(fd) # apply first digit function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "b489bcc7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     64\n",
       "2    108\n",
       "3      2\n",
       "4      1\n",
       "5      1\n",
       "7      1\n",
       "Name: 4numbers, dtype: int64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "four_front_count= pd.Index(four_front).value_counts().sort_index() # return counted values with sorted index\n",
    "four_front_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a039f49",
   "metadata": {},
   "source": [
    "While count for 0,6,8, and 9 is none, we add missing index for plot below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "dfbc0a68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 64, 108, 2, 1, 1, 0, 1, 0, 0]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "four_front_count = list(four_front_count) # convert to list\n",
    "four_front_count.insert(0,0) # insert values that are missing\n",
    "four_front_count.insert(6,0) # insert values that are missing\n",
    "four_front_count.insert(8,0) # insert values that are missing\n",
    "four_front_count.insert(9,0) # insert values that are missing\n",
    "four_front_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2286fedc",
   "metadata": {},
   "source": [
    "As we add the lengths of 1 to 4 digits numbers, it match to our original count as shown below "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "ebdcd5ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1115"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "287+442+209+177"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0674174",
   "metadata": {},
   "source": [
    "We can now get the last digits from 1 to 4 digits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "7880ae7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "one_back = one_data[\"1number\"].apply(ld) # apply last digit function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "0bc279d9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     2\n",
       "1    58\n",
       "2    50\n",
       "3    43\n",
       "4    29\n",
       "5    32\n",
       "6    22\n",
       "7    21\n",
       "8    17\n",
       "9    13\n",
       "Name: 1number, dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one_back_count= pd.Index(one_back).value_counts().sort_index() # return counted values with sorted index\n",
    "one_back_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "3d660818",
   "metadata": {},
   "outputs": [],
   "source": [
    "two_back = two_data[\"2numbers\"].apply(ld) # apply last digit function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "1e27d846",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    69\n",
       "2    68\n",
       "3    56\n",
       "4    56\n",
       "5    72\n",
       "6    27\n",
       "7    29\n",
       "8    40\n",
       "9    25\n",
       "Name: 2numbers, dtype: int64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "two_back_count= pd.Index(two_back).value_counts().sort_index() # return counted values with sorted index\n",
    "two_back_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41a7bdc9",
   "metadata": {},
   "source": [
    "While count for 0 is none, we add missing index for plot below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "411ef58a",
   "metadata": {},
   "outputs": [],
   "source": [
    "two_back_count = list(two_back_count) # convert to list\n",
    "two_back_count.insert(0,0) # insert values that are missing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "61415f13",
   "metadata": {},
   "outputs": [],
   "source": [
    "three_back = three_data[\"3numbers\"].apply(ld) # apply last digit function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "50e4ac1a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    44\n",
       "1    32\n",
       "2    28\n",
       "3    16\n",
       "4    12\n",
       "5    37\n",
       "6    10\n",
       "7    12\n",
       "8    10\n",
       "9     8\n",
       "Name: 3numbers, dtype: int64"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "three_back_count= pd.Index(three_back).value_counts().sort_index() # return counted values with sorted index\n",
    "three_back_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "08b4c511",
   "metadata": {},
   "outputs": [],
   "source": [
    "four_back = four_data[\"4numbers\"].apply(ld) # apply last digit function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "44376652",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    34\n",
       "2    13\n",
       "3     6\n",
       "4    13\n",
       "5    14\n",
       "6    12\n",
       "7    29\n",
       "8    32\n",
       "9    24\n",
       "Name: 4numbers, dtype: int64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "four_back_count= pd.Index(four_back).value_counts().sort_index() # return counted values with sorted index\n",
    "four_back_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53d3d209",
   "metadata": {},
   "source": [
    "While count for 0 is none, we add missing index for plot below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "6607b5c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "four_back_count = list(four_back_count) # convert to list\n",
    "four_back_count.insert(0,0) # insert values that are missing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f084cef",
   "metadata": {},
   "source": [
    "Now we can view the histogram plots of first and last digits of each."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "5f05d640",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0.98, 'Fd & Ld of 1 to 4 digits NYT numbers')"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=[0,1,2,3,4,5,6,7,8,9] # digits\n",
    "\n",
    "plt.figure(figsize=(10,10))\n",
    "plt.subplots_adjust(wspace=0.5,hspace=1.0)\n",
    "\n",
    "# plot of first digit count of NYT 1 digit numbers\n",
    "plt.subplot(5,2,1)\n",
    "plt.bar(x,one_front_count,color='r')\n",
    "plt.title('front digit of 1 digit number',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digit count of NYT 1 digit numbers\n",
    "plt.subplot(5,2,2)\n",
    "plt.bar(x,one_back_count,color='b')\n",
    "plt.title('last digit of 1 digit number',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of first digit count of NYT 2 digit numbers\n",
    "plt.subplot(5,2,3)\n",
    "plt.bar(x,two_front_count,color='r')\n",
    "plt.title('front digit of 2 digits number',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digit count of NYT 2 digit numbers\n",
    "plt.subplot(5,2,4)\n",
    "plt.bar(x,two_back_count,color='b')\n",
    "plt.title('last digit of 2 digits number',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of first digit count of NYT 3 digit numbers\n",
    "plt.subplot(5,2,5)\n",
    "plt.bar(x,three_front_count,color='r')\n",
    "plt.title('front digit of 3 digits number',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digit count of NYT 3 digit numbers\n",
    "plt.subplot(5,2,6)\n",
    "plt.bar(x,three_back_count,color='b')\n",
    "plt.title('last digit of 3 digits number',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of first digit count of NYT 4 digit numbers\n",
    "plt.subplot(5,2,7)\n",
    "plt.bar(x,four_front_count,color='r')\n",
    "plt.title('front digit of 4 digits number',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digit count of NYT 4 digit numbers\n",
    "plt.subplot(5,2,8)\n",
    "plt.bar(x,four_back_count,color='b')\n",
    "plt.title('last digit of 4 digits number',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of first digit count of total NYT numbers\n",
    "plt.subplot(5,2,9)\n",
    "plt.bar(x,NYT_front_count,color='m')\n",
    "plt.title('front digit of NYT numbers',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "# plot of last digit count of total NYT numbers\n",
    "plt.subplot(5,2,10)\n",
    "plt.bar(x,NYT_last_count,color='m')\n",
    "plt.title('last digit of NYT numbers',fontsize=15)\n",
    "plt.ylabel(\"count\",fontsize=10)\n",
    "plt.xlabel(\"digit\",fontsize=10)\n",
    "\n",
    "plt.suptitle('Fd & Ld of 1 to 4 digits NYT numbers',fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a7e941f",
   "metadata": {},
   "source": [
    "According to histogram result of first digit & last digit count, 1 is most used at two digits number."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d563065",
   "metadata": {},
   "source": [
    "Looking at the four digit numbers, they mostly returned values that shows __year__.\n",
    "Therefore, 2 was dominant in front digit of 4 digit numbers (1xxx~ 2xxx).\n",
    "\n",
    "Looking at the three digit numbers, the median value was 200. Hence, 100's value were dominant which tells 1 is mostly used.\n",
    "\n",
    "Looking at the two digit numbers, 1 was mostly used while the median was 30. Possible reason could be the dates which 1 and 2 have more probability usage.\n",
    "\n",
    "Looking at the one digit numbers, 1 was also dominant while the median value was 3.\n",
    "\n",
    "While there are 442 of 2 digit numbers, they take about 40% of total numbers(1,115). \n",
    "Therefore, 1 was mostly used in total.\n",
    "\n",
    "For the last digits, there was no clear pattern for 1 being used the most. However, since front and last digit of one digit numbers are equal, 1 was used the most same as front digit.\n",
    "\n",
    "Comparing results between previous CSV files with NYT text file, they all used 1 the most as front digit and no specific pattern found for last digit. We can assume, 1 has the most probability usage in data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "454c2c8a",
   "metadata": {},
   "source": [
    "## Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00c8306d",
   "metadata": {},
   "source": [
    "Through the project, we used our first & last digit function to csv files and text file to analyze the pattern.\n",
    "\n",
    "While there were no clear pattern found on last digit values, first digit values had one interesting pattern.\n",
    "\n",
    "Despite the type of file or information of data, they all returned 1 as the most used digit.\n",
    "\n",
    "2 Possible reason for first digit to be 1 from analyze, 1 had more probability to be used frequently and dates were indicated which years have 1 and 2 frequently, months have 1 more frequently, and finally dates have 1 and 2 more frequently made first digit 1 to be more used.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49f0354e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
